(function () {
    $.serializeJSON.splitInputNameIntoKeysArray = function (nameWithNoType) {
        var keys, f;
        f = $.serializeJSON;
        keys = nameWithNoType.split('['); // split string into array

        var rs = [];
        $.map(keys, function (key) {
            var item = key.replace(/\]/g, '');
            rs.push(...item.split('.'));// 处理 foo[0].Name 这样的情况
        }); // remove closing brackets
        if (rs[0] === '') { rs.shift(); } // ensure no opening bracket ("[foo][inn]" should be same as "foo[inn]")
        return rs;
    }
})();

(function () {
    $(function () {
        abp.event.on('app.opendModal', function () {
            $("input,select,textarea", ".list-group .template").each(function () {
                if (!$(this).prop("disabled")) {
                    $(this).prop("disabled", true);
                    $(this).attr("editable", true);
                }
            });
        });

        $(document).on("click", ".list-group .add", function () {
            //var index = $(this).parent('li').siblings(".template").children(".item").size();
            var index = $('ul.content').children('li').length - 1;
            var template = $('ul.content').children('.template').clone(); //$($(this).siblings(".template").html());
            $("input,select,textarea", template).attr("data-val", true).each(function () {
                if ($(this).attr("editable")) {
                    $(this).prop("disabled", false);
                    $(this).removeAttr("editable");
                }
                var name = $(this).attr("name");
                if (name) {
                    $(this).attr("name", name.replace(/\[(\d+)\]/, "[" + index + "]"));
                }
                var id = $(this).attr("id");
                if (id) {
                    $(this).attr("id", id.replace(/\_(\d+)\_/, "_" + index + "_"));
                }

                if ($(this).hasClass("Date") && !$(this).prop("readonly") && !$(this).prop("disabled")) {
                    $(this).datepicker({ language: "zh-CN", format: $(this).attr("JsDateFormat") });
                }
            });

            $(".field-validation-error,.field-validation-valid", template).each(function () {
                var msgFor = $(this).attr("data-valmsg-for");
                $(this).attr("data-valmsg-for", msgFor.replace(/\[(\d+)\]/, "[" + index + "]"))
            });
            template.removeClass('hidden template');
            $('ul.content').append(template);

            var form = $(this).closest("form");
            form.removeData("validator").removeData("unobtrusiveValidation");//unobtrusiveValidation
            $.validator.unobtrusive.parse(form);
        }).on("click", "ul.content .delete", function () {
            var li = $(this).parent();
            $('input[type="hidden"]', li).each(function () {
                var input = $(this);
                var name = input.attr('name');
                if (name.indexOf('ActionType') > -1) {
                    input.val('Delete');
                   // return false;
                }
                if (name.indexOf('IsDeleted') > -1) {
                    input.val('true');
                }
            });
            li.addClass('hidden');
        }).on("change", ".input-group-collection .form-control", function () {
            var actionType = $(".ActionType", $(this).closest(".item"));
            if (actionType.val() !== "Create") {
                actionType.val("Update");
            }
        });
    });
})();
(function () {
    app.modals.LookupModal = function () {

        var _modalManager;
        var _dataTable;
        var _$table;
        var _$filterInput;

        var _options = {
            serviceMethod: null, //Required
            title: app.localize('SelectAnItem'),
            loadOnStartup: true,
            showFilter: true,
            filterText: '',
            pageSize: app.consts.grid.defaultPageSize,
            canSelect: function (item) {
                /* This method can return boolean or a promise which returns boolean.
                 * A false value is used to prevent selection.
                 */
                return true;
            }
        };

        function refreshTable() {
            _dataTable.ajax.reload();
        };

        function selectItem(item) {
            var boolOrPromise = _options.canSelect(item);
            if (!boolOrPromise) {
                return;
            }

            if (boolOrPromise === true) {
                _modalManager.setResult(item);
                _modalManager.close();
                return;
            }

            //assume as promise
            boolOrPromise.then(function (result) {
                if (result) {
                    _modalManager.setResult(item);
                    _modalManager.close();
                }
            });
        }

        this.init = function (modalManager) {
            _modalManager = modalManager;
            _options = $.extend(_options, _modalManager.getOptions().lookupOptions);
            _$table = _modalManager.getModal().find('.lookup-modal-table');

            _dataTable = _$table.DataTable({
                paging: true,
                serverSide: true,
                processing: true,
                lengthChange: false,
                pageLength: _options.pageSize,
                deferLoading: _options.loadOnStartup ? null : 0,
                listAction: {
                    ajaxFunction: _options.serviceMethod,
                    inputFilter: function () {
                        return $.extend({
                            filter: _$filterInput.val()
                        }, _modalManager.getArgs().extraFilters);
                    }
                },
                columnDefs: [
                    {
                        targets: 0,
                        data: null,
                        orderable: false,
                        defaultContent: '',
                        className:'text-center',
                        rowAction: {
                            element: $("<button/>")
                                .addClass("btn btn-outline-primary btn-sm btn-icon")
                                .attr("title", app.localize('Select'))
                                .append($("<i/>").addClass("la la-chevron-circle-right")).click(function () {
                                    var record = $(this).data();
                                    selectItem(record);
                                })
                        }
                    },
                    {
                        targets: 1,
                        data: "name"
                    }
                ]
            });

            _modalManager.getModal()
                .find('.lookup-filter-button')
                .click(function (e) {
                    e.preventDefault();
                    refreshTable();
                });

            _modalManager.getModal()
                .find('.modal-body')
                .keydown(function (e) {
                    if (e.which === 13) {
                        e.preventDefault();
                        refreshTable();
                    }
                });

            _$filterInput = _modalManager.getModal().find('.lookup-filter-text');
            _$filterInput.val(_options.filterText);
        };
    };

    app.modals.LookupModal.create = function (lookupOptions) {
        return new app.ModalManager({
            viewUrl: abp.appPath + 'Admin/Common/LookupModal',
            scriptUrl: abp.appPath + 'view-resources/Areas/Admin/Views/Common/Modals/_LookupModal.js',
            modalClass: 'LookupModal',
            lookupOptions: lookupOptions
        });
    };
})();
(function () {
    app.modals.EntityTypeHistoryModal = function () {

        var _modalManager;
        var _dataTable;
        var _$table;
        var _args;

        var _auditLogService = abp.services.qks.auditLog;

        var _options = {
            serviceMethod: null, //Required
            title: app.localize('SelectAnItem'),
            loadOnStartup: true,
            showFilter: true,
            filterText: '',
            pageSize: app.consts.grid.defaultPageSize,
            canSelect: function (item) {
                /* This method can return boolean or a promise which returns boolean.
                 * A false value is used to prevent selection.
                 */
                return true;
            }
        };

        function refreshTable() {
            _dataTable.ajax.reload();
        };

        function showEntityChangeDetails(entityChange) {
            var entityChangeDetailModal = new app.ModalManager({
                viewUrl: abp.appPath + 'Admin/AuditLogs/EntityChangeDetailModal',
                modalClass: 'EntityChangeDetailModal'
            });

            entityChangeDetailModal.open({ entityChangeListDto: entityChange });
        }


        this.init = function (modalManager) {
            _modalManager = modalManager;
            
            _options = $.extend(_options, _modalManager.getOptions().lookupOptions);
            _$table = _modalManager.getModal().find('.entity-type-history-table');
            _args = _modalManager.getArgs();

            _dataTable = _$table.DataTable({
                paging: true,
                serverSide: true,
                processing: true,
                lengthChange: false,
                pageLength: _options.pageSize,
                deferLoading: _options.loadOnStartup ? null : 0,
                listAction: {
                    ajaxFunction: _auditLogService.getEntityTypeChanges,
                    inputFilter: function () {
                        return {
                            entityTypeFullName: _args.entityTypeFullName,
                            entityId: _args.entityId
                        };
                    }
                },
                columnDefs: [
                    {
                        targets: 0,
                        data: null,
                        orderable: false,
                        defaultContent: '',
                        rowAction: {
                            element: $("<div/>")
                                .addClass("text-center")
                                .append($("<button/>")
                                    .addClass("btn btn-outline-primary btn-sm btn-icon")
                                    .attr("title", app.localize("EntityChangeDetail"))
                                    .append($("<i/>").addClass("la la-search"))
                                ).click(function () {
                                    showEntityChangeDetails($(this).data());
                                })
                        }
                    },
                    {
                        targets: 1,
                        data: "changeTypeName",
                        orderable: false,
                        render: function (changeTypeName) {
                            return app.localize(changeTypeName);
                        }
                    },
                    {
                        targets: 2,
                        data: "userName"
                    },
                    {
                        targets: 3,
                        data: "changeTime",
                        render: function (changeTime) {
                            return moment(changeTime).format('L LT');
                        }
                    }
                ]
            });

            refreshTable();
        };
    };

    app.modals.EntityTypeHistoryModal.create = function () {
        return new app.ModalManager({
            viewUrl: abp.appPath + 'Admin/Common/EntityTypeHistoryModal',
            scriptUrl: abp.appPath + 'view-resources/Areas/Admin/Views/Common/Modals/_EntityTypeHistoryModal.js',
            modalClass: 'EntityTypeHistoryModal'
        });
    };
})();